{"version":3,"sources":["constants/index.js","API/index.js","components/weather/components.js","components/weather/index.js","pages/home/index.js","GlobalStyle.js","index.js"],"names":["API_KEY","instance","axios","create","baseURL","Card","styled","div","CardHeader","CardBody","CardBlock","CardElement","p","CardHeaderInput","input","Weather","weatherData","onUpdateData","useState","name","inputValue","setInputValue","useEffect","type","value","onChange","e","currentTarget","Button","onClick","event","className","inverted","color","circular","icon","weather","description","main","temp","toFixed","Date","sys","sunrise","toLocaleTimeString","sunset","moment","format","Home","latRef","useRef","longRef","undefined","setWeatherData","getPosition","useCallback","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","setWeather","lat","long","city","get","getWeather","then","response","data","catch","error","status","toast","warn","position","handleUpdateData","a","current","coords","latitude","longitude","err","promise","pending","success","Dimmer","active","Loader","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef44669b.chunk.js","sourcesContent":["export const API_URL = 'https://api.openweathermap.org/data/2.5/'\r\nexport const API_KEY = '80cf0225aa006c804cf0c8491f34733e'\r\nexport const API_ICON_URL = 'https://openweathermap.org/img/w/'","import { API_URL, API_KEY } from '../constants/index'\r\nimport axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: API_URL,\r\n})\r\n\r\nexport const getWeather = (lat, long, city) => {\r\n    if (city) {\r\n        return instance.get(`weather?q=${city}&appid=${API_KEY}`)\r\n    } else {\r\n        return instance.get(`weather?lat=${lat}&lon=${long}&appid=${API_KEY}`)\r\n    }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Card = styled.div`\r\n    width: 700px;\r\n    background: #e7e7fa;\r\n`\r\nexport const CardHeader = styled.div`\r\n    padding: 20px;\r\n    background: antiquewhite;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-size: 40px;\r\n`\r\nexport const CardBody = styled.div`\r\n    padding: 20px;\r\n`\r\nexport const CardBlock = styled.div`\r\n    display: flex;\r\n    margin: 10px 0;\r\n    flex-direction: column;\r\n`\r\nexport const CardElement = styled.p`\r\n    margin: 0;\r\n`\r\nexport const CardHeaderInput = styled.input`\r\n    border: none;\r\n    border-bottom: 1px solid;\r\n    background: transparent;\r\n`","import React from \"react\";\r\nimport moment from 'moment'\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Card, CardBlock, CardBody, CardElement, CardHeader, CardHeaderInput } from \"./components\"\r\nimport { useState, useEffect } from \"react\"\r\n\r\nexport const Weather = ({weatherData, onUpdateData}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(weatherData.name)\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setInputValue(weatherData.name)\r\n    },[weatherData])\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader>\r\n                <CardHeaderInput type='text' value={inputValue} onChange={handleInputChange}/>\r\n                <Button onClick={event => onUpdateData(inputValue)}>Find</Button>\r\n                <Button className=\"button\" inverted color='red' circular icon='refresh' onClick={event => onUpdateData(null)}/>\r\n            </CardHeader>\r\n            <CardBody>\r\n                <CardBlock>\r\n                    <CardElement>Weather: {weatherData.weather[0].description}</CardElement>\r\n                    <CardElement>Temp: {(weatherData.main.temp - 273.15).toFixed(2)} &deg;C</CardElement>\r\n                </CardBlock>\r\n                <CardBlock>\r\n                    <CardElement>Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</CardElement>\r\n                    <CardElement>Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</CardElement>\r\n                </CardBlock>\r\n                <CardBlock>\r\n                    <CardElement>Day: {moment().format('dddd')}</CardElement>\r\n                    <CardElement>Date: {moment().format('LL')}</CardElement>\r\n                </CardBlock>\r\n            </CardBody>\r\n        </Card>\r\n    )\r\n}","import React from 'react'\r\nimport { useState, useEffect, useRef, useCallback } from 'react'\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\n\r\nimport { getWeather } from '../../API'\r\nimport { Weather } from \"../../components/weather\";\r\n\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nexport const Home = () => {\r\n\r\n    const latRef = useRef(0)\r\n    const longRef = useRef(0)\r\n\r\n    const [weatherData, setWeatherData] = useState(undefined)\r\n\r\n    const getPosition = useCallback(() => {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.geolocation.getCurrentPosition(resolve, reject)\r\n        })\r\n    }, [])\r\n\r\n    const setWeather = useCallback((lat, long, city) => {\r\n        return getWeather(lat, long, city)\r\n            .then(response => response.data)\r\n            .then(data => setWeatherData(data))\r\n            .catch((error) => {\r\n                if (error.response.status === 404) {\r\n                    toast.warn('City not found', {\r\n                        position: \"top-center\",\r\n                    });\r\n                }\r\n            })\r\n    }, [])\r\n\r\n    const handleUpdateData = useCallback(async (city) => {\r\n        await getPosition()\r\n            .then((position) => {\r\n                latRef.current = position.coords.latitude\r\n                longRef.current = position.coords.longitude\r\n            })\r\n            .catch((err) => {\r\n                toast.error(err, {\r\n                    position: \"top-center\",\r\n                });\r\n            })\r\n        await toast.promise(\r\n            setWeather(latRef.current, longRef.current, city),\r\n            {\r\n                pending: 'Getting data...',\r\n                success: 'Data received ðŸ‘Œ',\r\n                error: 'Something wrong'\r\n            }\r\n        )\r\n    }, [getPosition, setWeather])\r\n\r\n\r\n    useEffect(() => {\r\n        handleUpdateData()\r\n    }, [handleUpdateData])\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer/>\r\n            {weatherData ? <Weather onUpdateData={handleUpdateData}\r\n                                    weatherData={weatherData}/> :\r\n                <Dimmer active>\r\n                    <Loader>Loading..</Loader>\r\n                </Dimmer>}\r\n        </>\r\n    )\r\n}\r\n\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background: #282c34;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-family: monospace;\r\n    font-size: 20px;\r\n  }\r\n`","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport {Home} from \"./pages/home\";\r\nimport {GlobalStyle} from \"./GlobalStyle\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <GlobalStyle/>\r\n        <Home/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}